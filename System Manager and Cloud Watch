AWS System Manager:
----------------------
*Sessions Manager

*Run Command to execute commands on the EC2 Instances or external machines.

*Parameter store to hold information both secure and normal.It will hold parameters like works as secret manager but secret manger is too advanced.

*Managed exteral machines by using hybrid.

process:
-----------
*Creating two linux servers(linux 2 version) with t3.small instance type.

*Go to AWS System Manager -->In node tools --> Run Command -->click Run Command
   --Command Document-->search for AWS-RunShellScript 
   --paste linux2 code in dialog box
   #!/bin/bash
   yum update -y
   yum install telnet -y
   yum install -y tmux
   amazon-linux-extras install nginx1.12 -y
   service nginx start
   systemctl enable nginx
   echo "<div><h1>$(cat /etc/hostname)</h1></div>" >> /usr/share/nginx/html/index.html
  --choose both instances in instances feild 
  --click run command        -->It will install the code on both servers
  
  
 Drive link : https://docs.google.com/document/d/1-VHf3xmQIoMoF4P3dP93zgYODxWG3fwb/edit
 
*Later we have to monitor the both linux servers using cloud watch.But cloud watch by default only cpu will be there.So if you want for disks space and memory to monitor so we need to install cloud watch agent.
*Using run command copy the cloud watch agent and confuguring the agent with some parameters and stores it in parameter store.
             #Go to AWS System Manager -->In node tools --> Run Command -->click Run Command
             #   --Command Document-->search for AWS-ConfigureAWSPackage
             #Name -->AmazonCloudWatchAgent and then click run command
             #Once it is copied and click on first server like testserver01 and connect to ec2
             #after login to instance run these commands
                   > sudo su -
                   > cd /opt/aws
                   > cd amazon-cloudwatch-agent/bin/
                   > ./amazon-cloudwatch-agent-config-wizard
                   > It will asks options based on your requirement choose the things.
                         log file path : /var/log/nginx/error.log
                         another log file path : /var/log/nginx/access.log
                         
                   *After configuring everything if you go to parameter store if will get data which we configure in Testserver01.The below data is the value which is stored in parameter store with name "AmazonCloudWatch-linux-AWSb65"
                   
                   
                   
                               {
	"agent": {
		"metrics_collection_interval": 30,
		"run_as_user": "root"
	},
	"logs": {
		"logs_collected": {
			"files": {
				"collect_list": [
					{
						"file_path": "/var/log/nginx/error.log",
						"log_group_class": "STANDARD",
						"log_group_name": "nginx-awsb65-error",
						"log_stream_name": "{instance_id}",
						"retention_in_days": 3
					},
					{
						"file_path": "/var/log/nginx/access.log",
						"log_group_class": "STANDARD",
						"log_group_name": "nginx-awsb65-access",
						"log_stream_name": "{instance_id}",
						"retention_in_days": 3
					}
				]
			}
		}
	},
	"metrics": {
		"aggregation_dimensions": [
			[
				"InstanceId"
			]
		],
		"metrics_collected": {
			"cpu": {
				"measurement": [
					"cpu_usage_idle",
					"cpu_usage_iowait",
					"cpu_usage_user",
					"cpu_usage_system"
				],
				"metrics_collection_interval": 30,
				"resources": [
					"*"
				],
				"totalcpu": false
			},
			"disk": {
				"measurement": [
					"used_percent",
					"inodes_free"
				],
				"metrics_collection_interval": 30,
				"resources": [
					"*"
				]
			},
			"diskio": {
				"measurement": [
					"io_time",
					"write_bytes",
					"read_bytes",
					"writes",
					"reads"
				],
				"metrics_collection_interval": 30,
				"resources": [
					"*"
				]
			},
			"mem": {
				"measurement": [
					"mem_used_percent"
				],
				"metrics_collection_interval": 30
			},
			"netstat": {
				"measurement": [
					"tcp_established",
					"tcp_time_wait"
				],
				"metrics_collection_interval": 30
			},
			"statsd": {
				"metrics_aggregation_interval": 30,
				"metrics_collection_interval": 30,
				"service_address": ":8125"
			},
			"swap": {
				"measurement": [
					"swap_used_percent"
				],
				"metrics_collection_interval": 30
			}
		}
	}
	
}
*Later if we go to cloud watch servive -->there in all metric-->we will get "cw Agent" under the custom namespaces
*Go to AWS System Manager -->In node tools --> Run Command -->click Run Command
             #   --Command Document-->search for AmazonCloudWatch-ManageAgent
             #Name -->AmazonCloudWatchAgent and then click run command
             #location : AmazonCloudWatch-linux-AWSb65  -->which stored in parameter store
             #specify instances manually --> choose testserver01 and click run command
             
*Go to run command history select the "AWS-ConfigureAWSPackage" and click "copy to new" there choose 2nd server like testserver02 and then click run command  -->this on will copy the package to second server.

*Go to run command history select the "AmazonCloudWatch-ManageAgent" and click "copy to new" there choose 2nd server like testserver02 and then click run command  -->this on will copy the package to second server.

*After go to cloud watch server there we can notice the CW Agent under custom namespaces in metrics


--------------------------------------

*Using AWS System Manager Service we can configure and access the other cloud server also from  AWS. 

*For example if we take an azure.

this is command line code:In azure shell we will execute this one.
------------------------
 
RG-AWSB65SSM
echo "Creating Azure Resource Group"
az group create--location eastus -n $(RG)

echo "Creating Azure Virtual Network"
az network vnet create -g $(RG) -n $(RG)-VNET1 --address-prefix 10.1.0.0/16 \
--subnet-name $(RG)-Subnet-1--subnet-prefix 10.1.1.0/24 -1 eastus
az network nsg create -g $(RG) -n $(RG)_NSG1 --location eastus
az network nsg rule create -g $(RG) --nsg-name $(RG)_NSG1 -n $(RG)_NSG1_RULE1 --priority 100 \
--source-address-prefixes  '*' --source-port-ranges '*'  --destination-address-prefixes '*' \
--destination-port-ranges  '*' --access Allow --protocol Tcp --description "Allowing All Traffic For Now"

IMAGE="Canonical:0081-com-ubuntu-server-jammy:22_04-lts:latest'

az vm create --resource-group $(RG) --name AppServer01 --image $IMAGE--vnet-name $(RG)-VNET1 \
--subnet $(RG)-Subnet-1--admin-username adminsree --admin-password "India@123456" --size Standard_B2s--storage-sku StandardSSD_LRS \
--nsg $(RG)_NSG1

watch 1s

*So the above code will deploy an ubuntu server with name "AppServer01" in azure.

*Go to AWS System Manager service and click on Hybrid Activations-->click on create activation
       #Activation description --> AzureServers
       #Instance limit : 1
       #IAM role :default role
       #then click on create an activation so it generates an activation id and activation code and note it in notepad or text editor.

*Go to this drive-->SSM folder-->SSM_Scripts.docx
 https://docs.google.com/document/d/1DQ_8X8k1mjYc1oMt6Cf6cxuL0EuOinc0/edit    
             
https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html
mkdir /tmp/ssm
curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb -o /tmp/ssm/amazon-ssm-agent.deb
sudo dpkg -i /tmp/ssm/amazon-ssm-agent.deb
sudo service amazon-ssm-agent stop
sudo amazon-ssm-agent -register -code "RgMn9krEw7ENiEtFKGSu" -id "e95022e3-a6e2-4395-9584-0bed27ed835b" -region "us-east-1" 
sudo service amazon-ssm-agent start



*Login into Appserver01 means azure server suing public ip of azure andrun the below commands
     > mkdir /tmp/ssm
       curl https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb -o /tmp/ssm/amazon-ssm-agent.deb
       sudo dpkg -i /tmp/ssm/amazon-ssm-agent.deb
     > sudo service amazon-ssm-agent stop
       sudo amazon-ssm-agent -register -code "RgMn9krEw7ENiEtFKGSu" -id "e95022e3-a6e2-4395-9584-0bed27ed835b" -region "us-east-1" 
       sudo service amazon-ssm-agent start
       
*Go to Hybrid Activations-->you will get one activation record

*Go to AWS System Manager-->Node tools -->Session Manger-->refresh it-->you will find out session there of about azure server session.-->select it and click on start session.It will open terminal and run these commands
                       > bash
                       > sudo su -
                       
*Install nginx in azure server using Run command --> click on Run command-->select AWS_RunShellScript-copy new-->give the below script and choose the azure server and click on run command
           #!/bin/bash
           apt update && apt install -y nginx unzip net-tools
           service nginx start
           
           
*Access the azure server with public ip in browser.
           

*Copy to new of azure run command record and run these commands  and click run command
        !/bin/bash
        cd /var/www
        rm -rf html
        git clone https://github.com/mavrick202/dockertest1.git html
        service nginx restart
        
*Access the azure server again

*Like the way using the Hybrid Activations we can access the other cloud server lik azure server from aws.
         
*Go to cloud watch and check the CWAgent in Custom namespaces.There you can findout the metrics

*Delete the azure vm in azure cloud.
        
*After we have to integrate the PagerDuty into aws cloud watch service.After we will configure these things in Simple Notification Service(SNS).Their we will create a topic with by giving autoscaling ARN and protocol is HTTPS and their endpoint url like in PagerDuty it will give one url(Integration url) and then create a subscription.if you want you can create an email subscription.	


*Create an email account in Godaady and update the DNS records of email in my godaddy domain account.
mail: aparna@awsaparna123.xyz

*Download the professional email app and login with email like aparna@awsaparna123.xyz

*Update that email and email json and https of pagerduty.So create three subscriptions for that.

Cloud Watch:
---------------
*Go to cloud watch and create an alarm for "Testserver01" based on "disk usage" of "CWAgent" .Give the alarm name "Disk_More_Than_35_Testserver01"
            --> login into Testserver01 and check df -h space and install terraform file and copy that files lot of times using for loop 
            to occupy space in server.if disks space >= 35 % for an 1 min then it will send alarm you will get notifications in email and pagerduty.goto
            cloud watch and check metrics for it.
            
*Go to cloud watch and create an alarm for "Testserver02" based on "memory usage"(choosehost) of "CWAgent" .Give the alarm name "Memory_More_Than_30_Testserver02"
            --> login into Testserver02 and install stress in it using the below commands and if you run "stress" it will give one command
            run it.Go to cloud watch and check metrics for alarm
            
               > sudo amazon-linux-extras install epel -y
               > sudo yum install stress -y
               
*We can also use "AWS Chatbot" service to send the alarm messages to slack with the help of SNS.
   #Configure the client like slack and give your workspace details and public channel details of your slack.
                 - Slack workspace: Awsaparna123
                 - devsecops-project  (configure channel details)
                 - give SNS topic deatils while configure it
                 
    #After chatbot is configured it will automatically create an subscription for chatbot with endpoint url like "https://global.sns-api.chatbot.amazonaws.com" in SNS topic.
    
    #when server memory and disks or cpu gets high rather than the configuration percentage of alarms in cloud watch.So cloud watch will send an email to SNS topic and chatbot sends the server metrics related to memory,disks or cpu into slack channel.There In SLack we can findout the metrics for our server.

note:
------
sudo amazon-ssm-agent -register -code "RgMn9krEw7ENiEtFKGSu" -id "e95022e3-a6e2-4395-9584-0bed27ed835b" -region "us-east-1"
                                               |                                   |
                                            give your activation code       action id 
                                            
*PagerDuty is an app whenever we configured the alarms if we are on call it will dail the call to persons.So sign into that PagerDuty using email.
                                       
                                            
*Related Security tools like Change management tools in AWS System Manager-->We can modify and track the infra chnages in Change Management tools.

*Path Manager-->To update windows or linux servers

*State Manager -->It will find the states based on specific time and action performed on resource.

*Security,Identity and Compliance --->GuardDuty Service,Security Hub


   
